{
    "commands": [
        {"match": "^(?:\\\\?[iI])$", "command": "text_pastry_step", "args": {"text": "1"}},
        {"match": "^(?:\\\\?[iI])?[\\s(]*(-?\\d+)(?:[\\s,]*(-?\\d+))?(?:[\\s,]*(-?\\d+))?[\\s)]*(.*)", "command": "text_pastry_step", "args": {"text": "$0"}},

        // use regex to split the clipboard data
        {"match": "^\\\\r\\((.*?)\\)$", "command": "text_pastry_insert_text", "args": {"separator": "$1", "clipboard": true, "regex": true}},
        {"match": "^r\\((.*?)\\)$", "command": "text_pastry_insert_text", "args": {"separator": "$1", "clipboard": true, "regex": true}},
        {"match": "^\\\\r (.*)", "command": "text_pastry_insert_text", "args": {"separator": "$1", "clipboard": true, "regex": true}},
        {"match": "^r (.*)", "command": "text_pastry_insert_text", "args": {"separator": "$1", "clipboard": true, "regex": true}},
        {"match": "^regex (.*)", "command": "text_pastry_insert_text", "args": {"separator": "$1", "clipboard": true, "regex": true}},

        // generate UUID
        {"match": "^\\\\UUID$", "command": "text_pastry_uuid", "args": {"uppercase": true} },
        {"match": "^\\\\UUID (x|X)(\\d+)$", "command": "text_pastry_uuid", "args": {"uppercase": true, "repeat": "$2"} },

        {"match": "^UUID$", "command": "text_pastry_uuid", "args": {"uppercase": true} },
        {"match": "^UUID (x|X)(\\d+)$", "command": "text_pastry_uuid", "args": {"uppercase": true, "repeat": "$2"} },

        {"match": "^\\\\uuid$", "command": "text_pastry_uuid" },
        {"match": "^\\\\uuid (x|X)(\\d+)$", "command": "text_pastry_uuid", "args": {"repeat": "$2"} },

        {"match": "^uuid$", "command": "text_pastry_uuid" },
        {"match": "^uuid (x|X)(\\d+)$", "command": "text_pastry_uuid", "args": {"repeat": "$2"} },

        // paste clipboard with custom separator
        {"match": "^\\\\p\\((.*?)\\)?$", "command": "text_pastry_insert_text", "args": {"separator": "$1", "clipboard": true} },
        {"match": "^p\\((.*?)\\)?$", "command": "text_pastry_insert_text", "args": {"separator": "$1", "clipboard": true} },
        {"match": "^\\\\p (.*)", "command": "text_pastry_insert_text", "args": {"separator": "$1", "clipboard": true} },
        {"match": "^p (.*)", "command": "text_pastry_insert_text", "args": {"separator": "$1", "clipboard": true} },

        // paste clipboard with newline separator
        {"match": "^\\\\p\\\\n", "command": "text_pastry_insert_text", "args": {"separator": "\\n", "clipboard": true} },
        {"match": "^pn$", "command": "text_pastry_insert_text", "args": {"separator": "\\n", "clipboard": true} },

        // paste clipboard with whitespace separator
        {"match": "^\\\\p$", "command": "text_pastry_insert_text", "args": {"clipboard": true} },
        {"match": "^p$", "command": "text_pastry_insert_text", "args": {"clipboard": true} },

        // paste by row
        {"match": "^pr$", "command": "text_pastry_insert_text", "args": {"clipboard": true, "by_rows": true} },
        {"match": "^pbr$", "command": "text_pastry_insert_text", "args": {"clipboard": true, "by_rows": true} },

        // regular text, using whitespace separator
        {"match": "^words no-repeat (.*)", "command": "text_pastry_words", "args": {"text": "$1", "repeat": false} },
        {"match": "^words (.*)", "command": "text_pastry_words", "args": {"text": "$1"} },

        // build-in commands
        {"match": "^uc$", "command": "upper_case"},
        {"match": "^upper$", "command": "upper_case"},
        {"match": "^lc$", "command": "lower_case"},
        {"match": "^lower$", "command": "lower_case"},
        {"match": "^(cap|caps)", "command": "title_case"},

        // shortcut case conversion plugin
        {"match": "^snake", "command": "convert_to_snake"},
        {"match": "^camel", "command": "convert_to_camel"},
        {"match": "^pascal", "command": "convert_to_pascal"},
        {"match": "^dot", "command": "convert_to_dot"},
        {"match": "^dash", "command": "convert_to_dash"},

        {"match": "^node (.*)", "command": "text_pastry_nodejs", "args": {"script": "$1"} },
        {"match": "^python (.*)", "command": "text_pastry_python", "args": {"script": "$1"} },
        {"match": "^ruby (.*)", "command": "text_pastry_ruby", "args": {"script": "$1" } },

        {"match": "^(search .+)", "command": "text_pastry_modify_selection",
            "args": {"context": null, "operator": null, "pattern": "$1"} },

        {"match": "^find (.+)", "command": "text_pastry_modify_selection",
            "args": {"context": null, "operator": null, "pattern": "$1"} },

        {"match": "^add (.+)", "command": "text_pastry_modify_selection",
            "args": {"context": "file", "operator": "add", "pattern": "$1"} },

        {"match": "^remove (lines|empty)$", "command": "text_pastry_modify_selection",
            "args": {"context": "selection", "operator": "subtract",  "patterns": ["(?m)^\\s*$", "\\n"]} },

        {"match": "^remove leading$", "command": "text_pastry_modify_selection",
            "args": {"context": "selection", "operator": "subtract",  "patterns": ["(?m)^$", "\\n", "(?m)^\\s+"]} },

        {"match": "^remove trailing$", "command": "text_pastry_modify_selection",
            "args": {"context": "selection", "operator": "subtract",  "patterns": ["(?m)^$", "\\n", "(?m)\\s+$"]} },

        {"match": "^(remove space|trim)$", "command": "text_pastry_modify_selection",
            "args": {"context": "selection", "operator": "subtract",  "patterns": ["(?m)^$", "\\n", "(?m)^\\s+", "(?m)\\s+$"]} },

        {"match": "^split$", "command": "text_pastry_modify_selection",
            "args": {"context": "selection", "operator": "subtract", "pattern": "[\\W]"} },

        {"match": "^(?:reduce|remove|subtract|split) (.+)", "command": "text_pastry_modify_selection",
            "args": {"context": "selection", "operator": "subtract", "pattern": "$1"} },

        {"match": "^filter (.+)", "command": "text_pastry_modify_selection",
            "args": {"context": "selection", "operator": null, "pattern": "$1"} },

        {"match": "^range (-?[\\d\\.]+)[-, ](-?[\\d\\.]+)[, ](-?[\\d\\.]+)[, ]([\\d\\.]+)[, ](.)$", "command": "text_pastry_range", "args": {"start": "$1", "stop": "$2", "step": "$3", "padding": "$4", "fillchar": "$5"} },
        {"match": "^range (-?[\\d\\.]+)[-, ](-?[\\d\\.]+)[, ](-?[\\d\\.]+)$", "command": "text_pastry_range", "args": {"start": "$1", "stop": "$2", "step": "$3"} },
        {"match": "^range (-?[\\d\\.]+)[-, ](-?[\\d\\.]+)$", "command": "text_pastry_range", "args": {"start": "$1", "stop": "$2"} },
        {"match": "^range (-?[\\d\\.]+)$", "command": "text_pastry_range", "args": {"stop": "$1"} },
        {"match": "^range (.*)$", "command": "text_pastry_range_parser", "args": {"text": "$0"} },

        // add x-arg support to date ranges
        {"match": "^(?:days|day) ?((?:\\b).*) x(\\d+)$", "command": "text_pastry_date_range", "args": {"text": "$1", "repeat": "$2"} },
        {"match": "^(?:weeks|week) ?((?:\\b).*) x(\\d+)$", "command": "text_pastry_date_range", "args": {"text": "$1", "step_size": "week", "repeat": "$2"} },
        {"match": "^(?:months|month) ?((?:\\b).*) x(\\d+)$", "command": "text_pastry_date_range", "args": {"text": "$1", "step_size": "month", "repeat": "$2"} },
        {"match": "^(?:end-of-month|eom|end-of-the-month|eotm|last-day-of-month|ldomlast-day-of-the-month|ldotm) ?((?:\\b).*) x(\\d+)$", "command": "text_pastry_date_range", "args": {"text": "$1", "step_size": "month", "last_day_of_month": true, "repeat": "$2"} },
        {"match": "^(?:years|year) ?((?:\\b).*) x(\\d+)$", "command": "text_pastry_date_range", "args": {"text": "$1", "step_size": "year", "repeat": "$2"} },

        {"match": "^(?:date-format) (.+)$", "command": "text_pastry_setting", "args": {"name": "date_format", "value": "$1"} },
        {"match": "^(?:days|day) ?((?:\\b).*)$", "command": "text_pastry_date_range", "args": {"text": "$1"} },
        {"match": "^(?:weeks|week) ?((?:\\b).*)$", "command": "text_pastry_date_range", "args": {"text": "$1", "step_size": "week"} },
        {"match": "^(?:months|month) ?((?:\\b).*)$", "command": "text_pastry_date_range", "args": {"text": "$1", "step_size": "month"} },
        {"match": "^(?:end-of-month|eom|end-of-the-month|eotm|last-day-of-month|ldomlast-day-of-the-month|ldotm) ?((?:\\b).*)$", "command": "text_pastry_date_range", "args": {"text": "$1", "step_size": "month", "last_day_of_month": true} },
        {"match": "^(?:years|year) ?((?:\\b).*)$", "command": "text_pastry_date_range", "args": {"text": "$1", "step_size": "year"} },

        {"match": "^x(\\d+) (.+?) (-?\\d*)$", "command": "text_pastry_auto_step", "args": {"text": "$2", "step_size": "$3", "repeat": "$1"} },
        {"match": "^x(\\d+) (.+?)$", "command": "text_pastry_auto_step", "args": {"text": "$2", "repeat": "$1"} },
        {"match": "^(?:s|as) (.+?) (-?\\d+) x(\\d+)$", "command": "text_pastry_auto_step", "args": {"text": "$1", "step_size": "$2", "repeat": "$3"} },
        {"match": "^(?:s|as) (.+?) x(\\d+) (-?\\d*)$", "command": "text_pastry_auto_step", "args": {"text": "$1", "step_size": "$3", "repeat": "$2"} },
        {"match": "^(?:s|as) (.+?) x(\\d+)$", "command": "text_pastry_auto_step", "args": {"text": "$1", "repeat": "$2"} },
        {"match": "^(?:s|as) (.+?) (-?\\d+)$", "command": "text_pastry_auto_step", "args": {"text": "$1", "step_size": "$2"} },
        {"match": "^(?:s|as) (.*)$", "command": "text_pastry_auto_step", "args": {"text": "$1"} }
    ]
}
